# Makefile.in generated by automake 1.11.6 from Makefile.am.
# @configure_input@

# Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
# 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011 Free Software
# Foundation, Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.

@SET_MAKE@

# This file is used for tool tests, and also in perf/Makefile.am.

# This file should be included (directly or indirectly) by every
# Makefile.am that builds programs.  And also the top-level Makefile.am.

#----------------------------------------------------------------------------
# Global stuff
#----------------------------------------------------------------------------

VPATH = @srcdir@
am__make_dryrun = \
  { \
    am__dry=no; \
    case $$MAKEFLAGS in \
      *\\[\ \	]*) \
        echo 'am--echo: ; @echo "AM"  OK' | $(MAKE) -f - 2>/dev/null \
          | grep '^AM OK$$' >/dev/null || am__dry=yes;; \
      *) \
        for am__flg in $$MAKEFLAGS; do \
          case $$am__flg in \
            *=*|--*) ;; \
            *n*) am__dry=yes; break;; \
          esac; \
        done;; \
    esac; \
    test $$am__dry = yes; \
  }
pkgdatadir = $(datadir)/@PACKAGE@
pkgincludedir = $(includedir)/@PACKAGE@
pkglibdir = $(libdir)/@PACKAGE@
pkglibexecdir = $(libexecdir)/@PACKAGE@
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = @build@
host_triplet = @host@
DIST_COMMON = $(dist_noinst_SCRIPTS) $(srcdir)/Makefile.am \
	$(srcdir)/Makefile.in $(top_srcdir)/Makefile.all.am \
	$(top_srcdir)/Makefile.tool-tests.am

# The Android toolchain includes all kinds of stdlib helpers present in
# bionic which is bad because we are not linking with it and the Android
# linker will panic.
@VGCONF_PLATVARIANT_IS_ANDROID_TRUE@am__append_1 = -nostdlib
@VGCONF_HAVE_PLATFORM_SEC_TRUE@am__append_2 = -DVGA_SEC_@VGCONF_ARCH_SEC@=1  \
@VGCONF_HAVE_PLATFORM_SEC_TRUE@		-DVGP_SEC_@VGCONF_ARCH_PRI@_@VGCONF_OS@=1

@HAS_WRITE_STRINGS_WARNING_TRUE@am__append_3 = -Wno-write-strings
@COMPILER_IS_CLANG_TRUE@am__append_4 = -Wno-format-extra-args \
@COMPILER_IS_CLANG_TRUE@	-Wno-literal-range \
@COMPILER_IS_CLANG_TRUE@	-Wno-string-plus-int # \
@COMPILER_IS_CLANG_TRUE@	drd/tests/annotate_ignore_rw.c
@COMPILER_IS_CLANG_TRUE@am__append_5 = -Wno-unused-private-field    # drd/tests/tsan_unittest.cpp
check_PROGRAMS = Add32$(EXEEXT) Add32Overflow$(EXEEXT) \
	Add32OverflowNeg$(EXEEXT) Add64$(EXEEXT) \
	Add64Overflow$(EXEEXT) Add64OverflowNeg$(EXEEXT) \
	AddF32$(EXEEXT) AddF32Cancel$(EXEEXT) AddF32Infinity$(EXEEXT) \
	AddF32Nan$(EXEEXT) AddF32Pre$(EXEEXT) AddF64$(EXEEXT) \
	AddF64Cancel$(EXEEXT) AddF64Infinity$(EXEEXT) \
	AddF64Nan$(EXEEXT) AddF64Pre$(EXEEXT) CmpF64$(EXEEXT) \
	CmpF64Close$(EXEEXT) Div32$(EXEEXT) Div64$(EXEEXT) \
	DivF32$(EXEEXT) DivF32Infinity$(EXEEXT) DivF32Nan$(EXEEXT) \
	DivF32Under$(EXEEXT) DivF64$(EXEEXT) DivF64Infinity$(EXEEXT) \
	DivF64Nan$(EXEEXT) DivF64Under$(EXEEXT) F64toF32$(EXEEXT) \
	F64toF32Overflow$(EXEEXT) F64toF32OverflowNeg$(EXEEXT) \
	F64toF32Under$(EXEEXT) F64toI32S$(EXEEXT) \
	F64toI32SInf$(EXEEXT) F64toI32SNaN$(EXEEXT) \
	F64toI32SOverflow$(EXEEXT) F64toI32SOverflowNeg$(EXEEXT) \
	F64toI64S$(EXEEXT) F64toI64SInf$(EXEEXT) F64toI64SNaN$(EXEEXT) \
	F64toI64SOverflow$(EXEEXT) F64toI64SOverflowNeg$(EXEEXT) \
	Mul32$(EXEEXT) Mul32Overflow$(EXEEXT) Mul64$(EXEEXT) \
	Mul64Overflow$(EXEEXT) MulF32$(EXEEXT) MulF32Infinity$(EXEEXT) \
	MulF32Under$(EXEEXT) MulF64$(EXEEXT) MulF64Infinity$(EXEEXT) \
	MulF64Under$(EXEEXT) SqrtF64$(EXEEXT) SqrtF64Nan$(EXEEXT) \
	SqrtLibcF64$(EXEEXT) SqrtLibcF64Nan$(EXEEXT) Sub32$(EXEEXT) \
	Sub32Overflow$(EXEEXT) Sub32OverflowNeg$(EXEEXT) \
	Sub64$(EXEEXT) Sub64Overflow$(EXEEXT) \
	Sub64OverflowNeg$(EXEEXT) SubF32$(EXEEXT) \
	SubF32Cancel$(EXEEXT) SubF32Infinity$(EXEEXT) \
	SubF32Nan$(EXEEXT) SubF32Pre$(EXEEXT) SubF64$(EXEEXT) \
	SubF64Cancel$(EXEEXT) SubF64Infinity$(EXEEXT) \
	SubF64Nan$(EXEEXT) SubF64Pre$(EXEEXT)
subdir = cojac/tests
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/configure.ac
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
mkinstalldirs = $(install_sh) -d
CONFIG_HEADER = $(top_builddir)/config.h
CONFIG_CLEAN_FILES =
CONFIG_CLEAN_VPATH_FILES =
Add32_SOURCES = Add32.c
Add32_OBJECTS = Add32.$(OBJEXT)
Add32_LDADD = $(LDADD)
Add32Overflow_SOURCES = Add32Overflow.c
Add32Overflow_OBJECTS = Add32Overflow.$(OBJEXT)
Add32Overflow_LDADD = $(LDADD)
Add32OverflowNeg_SOURCES = Add32OverflowNeg.c
Add32OverflowNeg_OBJECTS = Add32OverflowNeg.$(OBJEXT)
Add32OverflowNeg_LDADD = $(LDADD)
Add64_SOURCES = Add64.c
Add64_OBJECTS = Add64.$(OBJEXT)
Add64_LDADD = $(LDADD)
Add64Overflow_SOURCES = Add64Overflow.c
Add64Overflow_OBJECTS = Add64Overflow.$(OBJEXT)
Add64Overflow_LDADD = $(LDADD)
Add64OverflowNeg_SOURCES = Add64OverflowNeg.c
Add64OverflowNeg_OBJECTS = Add64OverflowNeg.$(OBJEXT)
Add64OverflowNeg_LDADD = $(LDADD)
AddF32_SOURCES = AddF32.c
AddF32_OBJECTS = AddF32.$(OBJEXT)
AddF32_LDADD = $(LDADD)
AddF32Cancel_SOURCES = AddF32Cancel.c
AddF32Cancel_OBJECTS = AddF32Cancel.$(OBJEXT)
AddF32Cancel_LDADD = $(LDADD)
AddF32Infinity_SOURCES = AddF32Infinity.c
AddF32Infinity_OBJECTS = AddF32Infinity.$(OBJEXT)
AddF32Infinity_LDADD = $(LDADD)
AddF32Nan_SOURCES = AddF32Nan.c
AddF32Nan_OBJECTS = AddF32Nan.$(OBJEXT)
AddF32Nan_LDADD = $(LDADD)
AddF32Pre_SOURCES = AddF32Pre.c
AddF32Pre_OBJECTS = AddF32Pre.$(OBJEXT)
AddF32Pre_LDADD = $(LDADD)
AddF64_SOURCES = AddF64.c
AddF64_OBJECTS = AddF64.$(OBJEXT)
AddF64_LDADD = $(LDADD)
AddF64Cancel_SOURCES = AddF64Cancel.c
AddF64Cancel_OBJECTS = AddF64Cancel.$(OBJEXT)
AddF64Cancel_LDADD = $(LDADD)
AddF64Infinity_SOURCES = AddF64Infinity.c
AddF64Infinity_OBJECTS = AddF64Infinity.$(OBJEXT)
AddF64Infinity_LDADD = $(LDADD)
AddF64Nan_SOURCES = AddF64Nan.c
AddF64Nan_OBJECTS = AddF64Nan.$(OBJEXT)
AddF64Nan_LDADD = $(LDADD)
AddF64Pre_SOURCES = AddF64Pre.c
AddF64Pre_OBJECTS = AddF64Pre.$(OBJEXT)
AddF64Pre_LDADD = $(LDADD)
CmpF64_SOURCES = CmpF64.c
CmpF64_OBJECTS = CmpF64.$(OBJEXT)
CmpF64_LDADD = $(LDADD)
CmpF64Close_SOURCES = CmpF64Close.c
CmpF64Close_OBJECTS = CmpF64Close.$(OBJEXT)
CmpF64Close_LDADD = $(LDADD)
Div32_SOURCES = Div32.c
Div32_OBJECTS = Div32.$(OBJEXT)
Div32_LDADD = $(LDADD)
Div64_SOURCES = Div64.c
Div64_OBJECTS = Div64.$(OBJEXT)
Div64_LDADD = $(LDADD)
DivF32_SOURCES = DivF32.c
DivF32_OBJECTS = DivF32.$(OBJEXT)
DivF32_LDADD = $(LDADD)
DivF32Infinity_SOURCES = DivF32Infinity.c
DivF32Infinity_OBJECTS = DivF32Infinity.$(OBJEXT)
DivF32Infinity_LDADD = $(LDADD)
DivF32Nan_SOURCES = DivF32Nan.c
DivF32Nan_OBJECTS = DivF32Nan.$(OBJEXT)
DivF32Nan_LDADD = $(LDADD)
DivF32Under_SOURCES = DivF32Under.c
DivF32Under_OBJECTS = DivF32Under.$(OBJEXT)
DivF32Under_LDADD = $(LDADD)
DivF64_SOURCES = DivF64.c
DivF64_OBJECTS = DivF64.$(OBJEXT)
DivF64_LDADD = $(LDADD)
DivF64Infinity_SOURCES = DivF64Infinity.c
DivF64Infinity_OBJECTS = DivF64Infinity.$(OBJEXT)
DivF64Infinity_LDADD = $(LDADD)
DivF64Nan_SOURCES = DivF64Nan.c
DivF64Nan_OBJECTS = DivF64Nan.$(OBJEXT)
DivF64Nan_LDADD = $(LDADD)
DivF64Under_SOURCES = DivF64Under.c
DivF64Under_OBJECTS = DivF64Under.$(OBJEXT)
DivF64Under_LDADD = $(LDADD)
F64toF32_SOURCES = F64toF32.c
F64toF32_OBJECTS = F64toF32.$(OBJEXT)
F64toF32_LDADD = $(LDADD)
F64toF32Overflow_SOURCES = F64toF32Overflow.c
F64toF32Overflow_OBJECTS = F64toF32Overflow.$(OBJEXT)
F64toF32Overflow_LDADD = $(LDADD)
F64toF32OverflowNeg_SOURCES = F64toF32OverflowNeg.c
F64toF32OverflowNeg_OBJECTS = F64toF32OverflowNeg.$(OBJEXT)
F64toF32OverflowNeg_LDADD = $(LDADD)
F64toF32Under_SOURCES = F64toF32Under.c
F64toF32Under_OBJECTS = F64toF32Under.$(OBJEXT)
F64toF32Under_LDADD = $(LDADD)
F64toI32S_SOURCES = F64toI32S.c
F64toI32S_OBJECTS = F64toI32S.$(OBJEXT)
F64toI32S_LDADD = $(LDADD)
F64toI32SInf_SOURCES = F64toI32SInf.c
F64toI32SInf_OBJECTS = F64toI32SInf.$(OBJEXT)
F64toI32SInf_LDADD = $(LDADD)
F64toI32SNaN_SOURCES = F64toI32SNaN.c
F64toI32SNaN_OBJECTS = F64toI32SNaN.$(OBJEXT)
F64toI32SNaN_LDADD = $(LDADD)
F64toI32SOverflow_SOURCES = F64toI32SOverflow.c
F64toI32SOverflow_OBJECTS = F64toI32SOverflow.$(OBJEXT)
F64toI32SOverflow_LDADD = $(LDADD)
F64toI32SOverflowNeg_SOURCES = F64toI32SOverflowNeg.c
F64toI32SOverflowNeg_OBJECTS = F64toI32SOverflowNeg.$(OBJEXT)
F64toI32SOverflowNeg_LDADD = $(LDADD)
F64toI64S_SOURCES = F64toI64S.c
F64toI64S_OBJECTS = F64toI64S.$(OBJEXT)
F64toI64S_LDADD = $(LDADD)
F64toI64SInf_SOURCES = F64toI64SInf.c
F64toI64SInf_OBJECTS = F64toI64SInf.$(OBJEXT)
F64toI64SInf_LDADD = $(LDADD)
F64toI64SNaN_SOURCES = F64toI64SNaN.c
F64toI64SNaN_OBJECTS = F64toI64SNaN.$(OBJEXT)
F64toI64SNaN_LDADD = $(LDADD)
F64toI64SOverflow_SOURCES = F64toI64SOverflow.c
F64toI64SOverflow_OBJECTS = F64toI64SOverflow.$(OBJEXT)
F64toI64SOverflow_LDADD = $(LDADD)
F64toI64SOverflowNeg_SOURCES = F64toI64SOverflowNeg.c
F64toI64SOverflowNeg_OBJECTS = F64toI64SOverflowNeg.$(OBJEXT)
F64toI64SOverflowNeg_LDADD = $(LDADD)
Mul32_SOURCES = Mul32.c
Mul32_OBJECTS = Mul32.$(OBJEXT)
Mul32_LDADD = $(LDADD)
Mul32Overflow_SOURCES = Mul32Overflow.c
Mul32Overflow_OBJECTS = Mul32Overflow.$(OBJEXT)
Mul32Overflow_LDADD = $(LDADD)
Mul64_SOURCES = Mul64.c
Mul64_OBJECTS = Mul64.$(OBJEXT)
Mul64_LDADD = $(LDADD)
Mul64Overflow_SOURCES = Mul64Overflow.c
Mul64Overflow_OBJECTS = Mul64Overflow.$(OBJEXT)
Mul64Overflow_LDADD = $(LDADD)
MulF32_SOURCES = MulF32.c
MulF32_OBJECTS = MulF32.$(OBJEXT)
MulF32_LDADD = $(LDADD)
MulF32Infinity_SOURCES = MulF32Infinity.c
MulF32Infinity_OBJECTS = MulF32Infinity.$(OBJEXT)
MulF32Infinity_LDADD = $(LDADD)
MulF32Under_SOURCES = MulF32Under.c
MulF32Under_OBJECTS = MulF32Under.$(OBJEXT)
MulF32Under_LDADD = $(LDADD)
MulF64_SOURCES = MulF64.c
MulF64_OBJECTS = MulF64.$(OBJEXT)
MulF64_LDADD = $(LDADD)
MulF64Infinity_SOURCES = MulF64Infinity.c
MulF64Infinity_OBJECTS = MulF64Infinity.$(OBJEXT)
MulF64Infinity_LDADD = $(LDADD)
MulF64Under_SOURCES = MulF64Under.c
MulF64Under_OBJECTS = MulF64Under.$(OBJEXT)
MulF64Under_LDADD = $(LDADD)
SqrtF64_SOURCES = SqrtF64.c
SqrtF64_OBJECTS = SqrtF64.$(OBJEXT)
SqrtF64_LDADD = $(LDADD)
SqrtF64Nan_SOURCES = SqrtF64Nan.c
SqrtF64Nan_OBJECTS = SqrtF64Nan.$(OBJEXT)
SqrtF64Nan_LDADD = $(LDADD)
SqrtLibcF64_SOURCES = SqrtLibcF64.c
SqrtLibcF64_OBJECTS = SqrtLibcF64.$(OBJEXT)
SqrtLibcF64_LDADD = $(LDADD)
SqrtLibcF64Nan_SOURCES = SqrtLibcF64Nan.c
SqrtLibcF64Nan_OBJECTS = SqrtLibcF64Nan.$(OBJEXT)
SqrtLibcF64Nan_LDADD = $(LDADD)
Sub32_SOURCES = Sub32.c
Sub32_OBJECTS = Sub32.$(OBJEXT)
Sub32_LDADD = $(LDADD)
Sub32Overflow_SOURCES = Sub32Overflow.c
Sub32Overflow_OBJECTS = Sub32Overflow.$(OBJEXT)
Sub32Overflow_LDADD = $(LDADD)
Sub32OverflowNeg_SOURCES = Sub32OverflowNeg.c
Sub32OverflowNeg_OBJECTS = Sub32OverflowNeg.$(OBJEXT)
Sub32OverflowNeg_LDADD = $(LDADD)
Sub64_SOURCES = Sub64.c
Sub64_OBJECTS = Sub64.$(OBJEXT)
Sub64_LDADD = $(LDADD)
Sub64Overflow_SOURCES = Sub64Overflow.c
Sub64Overflow_OBJECTS = Sub64Overflow.$(OBJEXT)
Sub64Overflow_LDADD = $(LDADD)
Sub64OverflowNeg_SOURCES = Sub64OverflowNeg.c
Sub64OverflowNeg_OBJECTS = Sub64OverflowNeg.$(OBJEXT)
Sub64OverflowNeg_LDADD = $(LDADD)
SubF32_SOURCES = SubF32.c
SubF32_OBJECTS = SubF32.$(OBJEXT)
SubF32_LDADD = $(LDADD)
SubF32Cancel_SOURCES = SubF32Cancel.c
SubF32Cancel_OBJECTS = SubF32Cancel.$(OBJEXT)
SubF32Cancel_LDADD = $(LDADD)
SubF32Infinity_SOURCES = SubF32Infinity.c
SubF32Infinity_OBJECTS = SubF32Infinity.$(OBJEXT)
SubF32Infinity_LDADD = $(LDADD)
SubF32Nan_SOURCES = SubF32Nan.c
SubF32Nan_OBJECTS = SubF32Nan.$(OBJEXT)
SubF32Nan_LDADD = $(LDADD)
SubF32Pre_SOURCES = SubF32Pre.c
SubF32Pre_OBJECTS = SubF32Pre.$(OBJEXT)
SubF32Pre_LDADD = $(LDADD)
SubF64_SOURCES = SubF64.c
SubF64_OBJECTS = SubF64.$(OBJEXT)
SubF64_LDADD = $(LDADD)
SubF64Cancel_SOURCES = SubF64Cancel.c
SubF64Cancel_OBJECTS = SubF64Cancel.$(OBJEXT)
SubF64Cancel_LDADD = $(LDADD)
SubF64Infinity_SOURCES = SubF64Infinity.c
SubF64Infinity_OBJECTS = SubF64Infinity.$(OBJEXT)
SubF64Infinity_LDADD = $(LDADD)
SubF64Nan_SOURCES = SubF64Nan.c
SubF64Nan_OBJECTS = SubF64Nan.$(OBJEXT)
SubF64Nan_LDADD = $(LDADD)
SubF64Pre_SOURCES = SubF64Pre.c
SubF64Pre_OBJECTS = SubF64Pre.$(OBJEXT)
SubF64Pre_LDADD = $(LDADD)
SCRIPTS = $(dist_noinst_SCRIPTS)
DEFAULT_INCLUDES = -I.@am__isrc@ -I$(top_builddir)
depcomp = $(SHELL) $(top_srcdir)/depcomp
am__depfiles_maybe = depfiles
am__mv = mv -f
COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \
	$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
CCLD = $(CC)
LINK = $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@
SOURCES = Add32.c Add32Overflow.c Add32OverflowNeg.c Add64.c \
	Add64Overflow.c Add64OverflowNeg.c AddF32.c AddF32Cancel.c \
	AddF32Infinity.c AddF32Nan.c AddF32Pre.c AddF64.c \
	AddF64Cancel.c AddF64Infinity.c AddF64Nan.c AddF64Pre.c \
	CmpF64.c CmpF64Close.c Div32.c Div64.c DivF32.c \
	DivF32Infinity.c DivF32Nan.c DivF32Under.c DivF64.c \
	DivF64Infinity.c DivF64Nan.c DivF64Under.c F64toF32.c \
	F64toF32Overflow.c F64toF32OverflowNeg.c F64toF32Under.c \
	F64toI32S.c F64toI32SInf.c F64toI32SNaN.c F64toI32SOverflow.c \
	F64toI32SOverflowNeg.c F64toI64S.c F64toI64SInf.c \
	F64toI64SNaN.c F64toI64SOverflow.c F64toI64SOverflowNeg.c \
	Mul32.c Mul32Overflow.c Mul64.c Mul64Overflow.c MulF32.c \
	MulF32Infinity.c MulF32Under.c MulF64.c MulF64Infinity.c \
	MulF64Under.c SqrtF64.c SqrtF64Nan.c SqrtLibcF64.c \
	SqrtLibcF64Nan.c Sub32.c Sub32Overflow.c Sub32OverflowNeg.c \
	Sub64.c Sub64Overflow.c Sub64OverflowNeg.c SubF32.c \
	SubF32Cancel.c SubF32Infinity.c SubF32Nan.c SubF32Pre.c \
	SubF64.c SubF64Cancel.c SubF64Infinity.c SubF64Nan.c \
	SubF64Pre.c
DIST_SOURCES = Add32.c Add32Overflow.c Add32OverflowNeg.c Add64.c \
	Add64Overflow.c Add64OverflowNeg.c AddF32.c AddF32Cancel.c \
	AddF32Infinity.c AddF32Nan.c AddF32Pre.c AddF64.c \
	AddF64Cancel.c AddF64Infinity.c AddF64Nan.c AddF64Pre.c \
	CmpF64.c CmpF64Close.c Div32.c Div64.c DivF32.c \
	DivF32Infinity.c DivF32Nan.c DivF32Under.c DivF64.c \
	DivF64Infinity.c DivF64Nan.c DivF64Under.c F64toF32.c \
	F64toF32Overflow.c F64toF32OverflowNeg.c F64toF32Under.c \
	F64toI32S.c F64toI32SInf.c F64toI32SNaN.c F64toI32SOverflow.c \
	F64toI32SOverflowNeg.c F64toI64S.c F64toI64SInf.c \
	F64toI64SNaN.c F64toI64SOverflow.c F64toI64SOverflowNeg.c \
	Mul32.c Mul32Overflow.c Mul64.c Mul64Overflow.c MulF32.c \
	MulF32Infinity.c MulF32Under.c MulF64.c MulF64Infinity.c \
	MulF64Under.c SqrtF64.c SqrtF64Nan.c SqrtLibcF64.c \
	SqrtLibcF64Nan.c Sub32.c Sub32Overflow.c Sub32OverflowNeg.c \
	Sub64.c Sub64Overflow.c Sub64OverflowNeg.c SubF32.c \
	SubF32Cancel.c SubF32Infinity.c SubF32Nan.c SubF32Pre.c \
	SubF64.c SubF64Cancel.c SubF64Infinity.c SubF64Nan.c \
	SubF64Pre.c
RECURSIVE_TARGETS = all-recursive check-recursive dvi-recursive \
	html-recursive info-recursive install-data-recursive \
	install-dvi-recursive install-exec-recursive \
	install-html-recursive install-info-recursive \
	install-pdf-recursive install-ps-recursive install-recursive \
	installcheck-recursive installdirs-recursive pdf-recursive \
	ps-recursive uninstall-recursive
am__can_run_installinfo = \
  case $$AM_UPDATE_INFO_DIR in \
    n|no|NO) false;; \
    *) (install-info --version) >/dev/null 2>&1;; \
  esac
RECURSIVE_CLEAN_TARGETS = mostlyclean-recursive clean-recursive	\
  distclean-recursive maintainer-clean-recursive
AM_RECURSIVE_TARGETS = $(RECURSIVE_TARGETS:-recursive=) \
	$(RECURSIVE_CLEAN_TARGETS:-recursive=) tags TAGS ctags CTAGS \
	distdir
ETAGS = etags
CTAGS = ctags
DIST_SUBDIRS = $(SUBDIRS)
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
am__relativize = \
  dir0=`pwd`; \
  sed_first='s,^\([^/]*\)/.*$$,\1,'; \
  sed_rest='s,^[^/]*/*,,'; \
  sed_last='s,^.*/\([^/]*\)$$,\1,'; \
  sed_butlast='s,/*[^/]*$$,,'; \
  while test -n "$$dir1"; do \
    first=`echo "$$dir1" | sed -e "$$sed_first"`; \
    if test "$$first" != "."; then \
      if test "$$first" = ".."; then \
        dir2=`echo "$$dir0" | sed -e "$$sed_last"`/"$$dir2"; \
        dir0=`echo "$$dir0" | sed -e "$$sed_butlast"`; \
      else \
        first2=`echo "$$dir2" | sed -e "$$sed_first"`; \
        if test "$$first2" = "$$first"; then \
          dir2=`echo "$$dir2" | sed -e "$$sed_rest"`; \
        else \
          dir2="../$$dir2"; \
        fi; \
        dir0="$$dir0"/"$$first"; \
      fi; \
    fi; \
    dir1=`echo "$$dir1" | sed -e "$$sed_rest"`; \
  done; \
  reldir="$$dir2"
ACLOCAL = @ACLOCAL@
AMTAR = @AMTAR@
AR = @AR@
AUTOCONF = @AUTOCONF@
AUTOHEADER = @AUTOHEADER@
AUTOMAKE = @AUTOMAKE@
AWK = @AWK@
BOOST_CFLAGS = @BOOST_CFLAGS@
BOOST_LIBS = @BOOST_LIBS@
CC = @CC@
CCAS = @CCAS@
CCASDEPMODE = @CCASDEPMODE@
CCASFLAGS = @CCASFLAGS@
CCDEPMODE = @CCDEPMODE@
CFLAGS = @CFLAGS@ $(am__append_3) $(am__append_4)
CFLAGS_MPI = @CFLAGS_MPI@
CPP = @CPP@
CPPFLAGS = @CPPFLAGS@
CXX = @CXX@
CXXDEPMODE = @CXXDEPMODE@
CXXFLAGS = @CXXFLAGS@ $(am__append_5)
CYGPATH_W = @CYGPATH_W@
DEFAULT_SUPP = @DEFAULT_SUPP@
DEFS = @DEFS@
DEPDIR = @DEPDIR@
DIFF = @DIFF@
ECHO_C = @ECHO_C@
ECHO_N = @ECHO_N@
ECHO_T = @ECHO_T@
EGREP = @EGREP@
EXEEXT = @EXEEXT@
FLAG_FNO_STACK_PROTECTOR = @FLAG_FNO_STACK_PROTECTOR@
FLAG_M32 = @FLAG_M32@
FLAG_M64 = @FLAG_M64@
FLAG_MMMX = @FLAG_MMMX@
FLAG_MSSE = @FLAG_MSSE@
FLAG_NO_BUILD_ID = @FLAG_NO_BUILD_ID@
FLAG_T_TEXT = @FLAG_T_TEXT@
FLAG_UNLIMITED_INLINE_UNIT_GROWTH = @FLAG_UNLIMITED_INLINE_UNIT_GROWTH@
FLAG_W_EXTRA = @FLAG_W_EXTRA@
FLAG_W_NO_EMPTY_BODY = @FLAG_W_NO_EMPTY_BODY@
FLAG_W_NO_FORMAT_ZERO_LENGTH = @FLAG_W_NO_FORMAT_ZERO_LENGTH@
FLAG_W_NO_NONNULL = @FLAG_W_NO_NONNULL@
FLAG_W_NO_OVERFLOW = @FLAG_W_NO_OVERFLOW@
FLAG_W_NO_UNINITIALIZED = @FLAG_W_NO_UNINITIALIZED@
GDB = @GDB@
GLIBC_VERSION = @GLIBC_VERSION@
GREP = @GREP@
INSTALL = @INSTALL@
INSTALL_DATA = @INSTALL_DATA@
INSTALL_PROGRAM = @INSTALL_PROGRAM@
INSTALL_SCRIPT = @INSTALL_SCRIPT@
INSTALL_STRIP_PROGRAM = @INSTALL_STRIP_PROGRAM@
LDFLAGS = @LDFLAGS@
LDFLAGS_MPI = @LDFLAGS_MPI@
LIBOBJS = @LIBOBJS@
LIBS = @LIBS@
LN_S = @LN_S@
LTLIBOBJS = @LTLIBOBJS@
MAINT = @MAINT@
MAKEINFO = @MAKEINFO@
MKDIR_P = @MKDIR_P@
MPI_CC = @MPI_CC@
OBJEXT = @OBJEXT@
PACKAGE = @PACKAGE@
PACKAGE_BUGREPORT = @PACKAGE_BUGREPORT@
PACKAGE_NAME = @PACKAGE_NAME@
PACKAGE_STRING = @PACKAGE_STRING@
PACKAGE_TARNAME = @PACKAGE_TARNAME@
PACKAGE_URL = @PACKAGE_URL@
PACKAGE_VERSION = @PACKAGE_VERSION@
PATH_SEPARATOR = @PATH_SEPARATOR@
PERL = @PERL@
PREFERRED_STACK_BOUNDARY = @PREFERRED_STACK_BOUNDARY@
RANLIB = @RANLIB@
SED = @SED@
SET_MAKE = @SET_MAKE@
SHELL = @SHELL@
STRIP = @STRIP@
VALT_LOAD_ADDRESS_PRI = @VALT_LOAD_ADDRESS_PRI@
VALT_LOAD_ADDRESS_SEC = @VALT_LOAD_ADDRESS_SEC@
VERSION = @VERSION@
VGCONF_ARCH_PRI = @VGCONF_ARCH_PRI@
VGCONF_ARCH_SEC = @VGCONF_ARCH_SEC@
VGCONF_OS = @VGCONF_OS@
VGCONF_PLATFORM_PRI_CAPS = @VGCONF_PLATFORM_PRI_CAPS@
VGCONF_PLATFORM_SEC_CAPS = @VGCONF_PLATFORM_SEC_CAPS@
VGCONF_PLATVARIANT = @VGCONF_PLATVARIANT@
abs_builddir = @abs_builddir@
abs_srcdir = @abs_srcdir@
abs_top_builddir = @abs_top_builddir@
abs_top_srcdir = @abs_top_srcdir@
ac_ct_CC = @ac_ct_CC@
ac_ct_CXX = @ac_ct_CXX@
am__include = @am__include@
am__leading_dot = @am__leading_dot@
am__quote = @am__quote@
am__tar = @am__tar@
am__untar = @am__untar@
bindir = @bindir@
build = @build@
build_alias = @build_alias@
build_cpu = @build_cpu@
build_os = @build_os@
build_vendor = @build_vendor@
builddir = @builddir@
datadir = @datadir@
datarootdir = @datarootdir@
docdir = @docdir@
dvidir = @dvidir@
exec_prefix = @exec_prefix@
host = @host@
host_alias = @host_alias@
host_cpu = @host_cpu@
host_os = @host_os@
host_vendor = @host_vendor@
htmldir = @htmldir@
includedir = @includedir@
infodir = @infodir@
install_sh = @install_sh@
libdir = @libdir@
libexecdir = @libexecdir@
localedir = @localedir@
localstatedir = @localstatedir@
mandir = @mandir@
mkdir_p = @mkdir_p@
oldincludedir = @oldincludedir@
pdfdir = @pdfdir@
prefix = @prefix@
program_transform_name = @program_transform_name@
psdir = @psdir@
sbindir = @sbindir@
sharedstatedir = @sharedstatedir@
srcdir = @srcdir@
sysconfdir = @sysconfdir@
target_alias = @target_alias@
top_build_prefix = @top_build_prefix@
top_builddir = @top_builddir@
top_srcdir = @top_srcdir@
inplacedir = $(top_builddir)/.in_place

#--------------------------------------------------make --------------------------
# Flags
#----------------------------------------------------------------------------

# Baseline flags for all compilations.  Aim here is to maximise
# performance and get whatever useful warnings we can out of gcc.
# -fno-builtin is important for defeating LLVM's idiom recognition
# that somehow causes VG_(memset) to get into infinite recursion.
AM_CFLAGS_BASE = \
	-O0 -g \
	-Wall \
	-Wmissing-prototypes \
	-Wshadow \
	-Wpointer-arith \
	-Wstrict-prototypes \
	-Wmissing-declarations \
	@FLAG_W_NO_FORMAT_ZERO_LENGTH@ \
	-fno-strict-aliasing \
	-fno-builtin \
	-frounding-math

@VGCONF_OS_IS_DARWIN_FALSE@AM_CFLAGS_PIC = -fpic -O -g -fno-omit-frame-pointer -fno-strict-aliasing \
@VGCONF_OS_IS_DARWIN_FALSE@		-fno-builtin


# These flags are used for building the preload shared objects.
# The aim is to give reasonable performance but also to have good
# stack traces, since users often see stack traces extending 
# into (and through) the preloads.
@VGCONF_OS_IS_DARWIN_TRUE@AM_CFLAGS_PIC = -dynamic -O -g -fno-omit-frame-pointer -fno-strict-aliasing \
@VGCONF_OS_IS_DARWIN_TRUE@		-mno-dynamic-no-pic -fpic -fPIC \
@VGCONF_OS_IS_DARWIN_TRUE@		-fno-builtin


# Flags for specific targets.
#
# Nb: the AM_CPPFLAGS_* values are suitable for building tools and auxprogs.
# For building the core, coregrind/Makefile.am files add some extra things.
AM_CPPFLAGS_@VGCONF_PLATFORM_PRI_CAPS@ = \
	-I$(top_srcdir) \
	-I$(top_srcdir)/include \
	-I$(top_srcdir)/VEX/pub \
	-DVGA_@VGCONF_ARCH_PRI@=1 \
	-DVGO_@VGCONF_OS@=1 \
	-DVGP_@VGCONF_ARCH_PRI@_@VGCONF_OS@=1 \
	-DVGPV_@VGCONF_ARCH_PRI@_@VGCONF_OS@_@VGCONF_PLATVARIANT@=1

@VGCONF_HAVE_PLATFORM_SEC_TRUE@AM_CPPFLAGS_@VGCONF_PLATFORM_SEC_CAPS@ = \
@VGCONF_HAVE_PLATFORM_SEC_TRUE@	-I$(top_srcdir) \
@VGCONF_HAVE_PLATFORM_SEC_TRUE@	-I$(top_srcdir)/include \
@VGCONF_HAVE_PLATFORM_SEC_TRUE@	-I$(top_srcdir)/VEX/pub \
@VGCONF_HAVE_PLATFORM_SEC_TRUE@	-DVGA_@VGCONF_ARCH_SEC@=1 \
@VGCONF_HAVE_PLATFORM_SEC_TRUE@	-DVGO_@VGCONF_OS@=1 \
@VGCONF_HAVE_PLATFORM_SEC_TRUE@	-DVGP_@VGCONF_ARCH_SEC@_@VGCONF_OS@=1 \
@VGCONF_HAVE_PLATFORM_SEC_TRUE@	-DVGPV_@VGCONF_ARCH_SEC@_@VGCONF_OS@_@VGCONF_PLATVARIANT@=1

AM_FLAG_M3264_X86_LINUX = @FLAG_M32@
AM_CFLAGS_X86_LINUX = @FLAG_M32@  @PREFERRED_STACK_BOUNDARY@ \
				$(AM_CFLAGS_BASE) -fomit-frame-pointer

AM_CCASFLAGS_X86_LINUX = @FLAG_M32@ -g
AM_FLAG_M3264_AMD64_LINUX = @FLAG_M64@
AM_CFLAGS_AMD64_LINUX = @FLAG_M64@ @PREFERRED_STACK_BOUNDARY@ \
				$(AM_CFLAGS_BASE) -fomit-frame-pointer

AM_CCASFLAGS_AMD64_LINUX = @FLAG_M64@ -g
AM_FLAG_M3264_PPC32_LINUX = @FLAG_M32@
AM_CFLAGS_PPC32_LINUX = @FLAG_M32@ $(AM_CFLAGS_BASE)
AM_CCASFLAGS_PPC32_LINUX = @FLAG_M32@ -g
AM_FLAG_M3264_PPC64_LINUX = @FLAG_M64@
AM_CFLAGS_PPC64_LINUX = @FLAG_M64@ $(AM_CFLAGS_BASE)
AM_CCASFLAGS_PPC64_LINUX = @FLAG_M64@ -g
AM_FLAG_M3264_ARM_LINUX = @FLAG_M32@
AM_CFLAGS_ARM_LINUX = @FLAG_M32@ @PREFERRED_STACK_BOUNDARY@ \
			 	$(AM_CFLAGS_BASE) -marm -mcpu=cortex-a8

AM_CCASFLAGS_ARM_LINUX = @FLAG_M32@ \
				-marm -mcpu=cortex-a8 -g

AM_FLAG_M3264_X86_DARWIN = -arch i386
AM_CFLAGS_X86_DARWIN = $(WERROR) -arch i386 $(AM_CFLAGS_BASE) \
				-mmacosx-version-min=10.5 \
				-fno-stack-protector -fno-pic -fno-PIC

AM_CCASFLAGS_X86_DARWIN = -arch i386 -g
AM_FLAG_M3264_AMD64_DARWIN = -arch x86_64
AM_CFLAGS_AMD64_DARWIN = $(WERROR) -arch x86_64 $(AM_CFLAGS_BASE) \
			    -mmacosx-version-min=10.5 -fno-stack-protector

AM_CCASFLAGS_AMD64_DARWIN = -arch x86_64 -g
AM_FLAG_M3264_S390X_LINUX = @FLAG_M64@
AM_CFLAGS_S390X_LINUX = @FLAG_M64@ $(AM_CFLAGS_BASE) -fomit-frame-pointer
AM_CCASFLAGS_S390X_LINUX = @FLAG_M64@ -g -mzarch -march=z900
AM_FLAG_M3264_MIPS32_LINUX = @FLAG_M32@
AM_CFLAGS_MIPS32_LINUX = @FLAG_M32@ $(AM_CFLAGS_BASE) -mips32
AM_CCASFLAGS_MIPS32_LINUX = @FLAG_M32@ -mips32 -g
AM_FLAG_M3264_MIPS64_LINUX = @FLAG_M64@
AM_CFLAGS_MIPS64_LINUX = @FLAG_M64@ $(AM_CFLAGS_BASE) -mips64
AM_CCASFLAGS_MIPS64_LINUX = @FLAG_M64@ -mips64 -g

# Flags for the primary target.  These must be used to build the
# regtests and performance tests.  In fact, these must be used to
# build anything which is built only once on a dual-arch build.
#
AM_FLAG_M3264_PRI = $(AM_FLAG_M3264_@VGCONF_PLATFORM_PRI_CAPS@)
AM_CPPFLAGS_PRI = $(AM_CPPFLAGS_@VGCONF_PLATFORM_PRI_CAPS@)
AM_CFLAGS_PRI = $(AM_CFLAGS_@VGCONF_PLATFORM_PRI_CAPS@)
AM_CCASFLAGS_PRI = $(AM_CCASFLAGS_@VGCONF_PLATFORM_PRI_CAPS@)
@VGCONF_HAVE_PLATFORM_SEC_FALSE@AM_FLAG_M3264_SEC = 
@VGCONF_HAVE_PLATFORM_SEC_TRUE@AM_FLAG_M3264_SEC = $(AM_FLAG_M3264_@VGCONF_PLATFORM_SEC_CAPS@)

# Baseline link flags for making vgpreload shared objects.
#
PRELOAD_LDFLAGS_COMMON_LINUX = -nodefaultlibs -shared \
	-Wl,-z,interpose,-z,initfirst $(am__append_1)
PRELOAD_LDFLAGS_COMMON_DARWIN = -dynamic -dynamiclib -all_load
PRELOAD_LDFLAGS_X86_LINUX = $(PRELOAD_LDFLAGS_COMMON_LINUX) @FLAG_M32@
PRELOAD_LDFLAGS_AMD64_LINUX = $(PRELOAD_LDFLAGS_COMMON_LINUX) @FLAG_M64@
PRELOAD_LDFLAGS_PPC32_LINUX = $(PRELOAD_LDFLAGS_COMMON_LINUX) @FLAG_M32@
PRELOAD_LDFLAGS_PPC64_LINUX = $(PRELOAD_LDFLAGS_COMMON_LINUX) @FLAG_M64@
PRELOAD_LDFLAGS_ARM_LINUX = $(PRELOAD_LDFLAGS_COMMON_LINUX) @FLAG_M32@
PRELOAD_LDFLAGS_X86_DARWIN = $(PRELOAD_LDFLAGS_COMMON_DARWIN) -arch i386
PRELOAD_LDFLAGS_AMD64_DARWIN = $(PRELOAD_LDFLAGS_COMMON_DARWIN) -arch x86_64
PRELOAD_LDFLAGS_S390X_LINUX = $(PRELOAD_LDFLAGS_COMMON_LINUX) @FLAG_M64@
PRELOAD_LDFLAGS_MIPS32_LINUX = $(PRELOAD_LDFLAGS_COMMON_LINUX) @FLAG_M32@
PRELOAD_LDFLAGS_MIPS64_LINUX = $(PRELOAD_LDFLAGS_COMMON_LINUX) @FLAG_M64@
AM_CPPFLAGS = -I$(top_srcdir) -I$(top_srcdir)/include \
	-I$(top_srcdir)/coregrind -I$(top_builddir)/include \
	-I$(top_srcdir)/VEX/pub -DVGA_@VGCONF_ARCH_PRI@=1 \
	-DVGO_@VGCONF_OS@=1 -DVGP_@VGCONF_ARCH_PRI@_@VGCONF_OS@=1 \
	-DVGPV_@VGCONF_ARCH_PRI@_@VGCONF_OS@_@VGCONF_PLATVARIANT@=1 \
	$(am__append_2)

# Nb: Tools need to augment these flags with an arch-selection option, such
# as $(AM_FLAG_M3264_PRI).
AM_CFLAGS = -Winline -Wall -Wshadow -g
AM_CXXFLAGS = -Winline -Wall -Wshadow -g
# Include AM_CPPFLAGS in AM_CCASFLAGS to allow for older versions of
# automake;  see comments in Makefile.all.am for more detail.
AM_CCASFLAGS = $(AM_CPPFLAGS)
@VGCONF_OS_IS_DARWIN_TRUE@noinst_DSYMS = $(check_PROGRAMS)
dist_noinst_SCRIPTS = filter_stderr
SUBDIRS = .
EXTRA_DIST = Add32.stderr.exp Add32.vgtest \
              Add32Overflow.stderr.exp Add32Overflow.vgtest \
              Add32OverflowNeg.stderr.exp Add32OverflowNeg.vgtest \
              Add64.stderr.exp Add64.vgtest \
              Add64Overflow.stderr.exp Add64Overflow.vgtest \
              Add64OverflowNeg.stderr.exp Add64OverflowNeg.vgtest \
              AddF32.stderr.exp AddF32.vgtest \
              AddF32Cancel.stderr.exp AddF32Cancel.vgtest \
              AddF32Infinity.stderr.exp AddF32Infinity.vgtest \
              AddF32Nan.stderr.exp AddF32Nan.vgtest \
              AddF32Pre.stderr.exp AddF32Pre.vgtest \
              AddF64.stderr.exp AddF64.vgtest \
              AddF64Cancel.stderr.exp AddF64Cancel.vgtest \
              AddF64Infinity.stderr.exp AddF64Infinity.vgtest \
              AddF64Nan.stderr.exp AddF64Nan.vgtest \
              AddF64Pre.stderr.exp AddF64Pre.vgtest \
              CmpF64.stderr.exp CmpF64.vgest \
              CmpF64Close.stderr.exp CmpF64Close.vgest \
              Div32.stderr.exp Div32.vgtest \
              Div64.stderr.exp Div64.vgtest \
              DivF32.stderr.exp DivF32.vgtest \
              DivF32Infinity.stderr.exp DivF32Infinity.vgtest \
              DivF32Nan.stderr.exp DivF32Nan.vgtest \
              DivF32Under.stderr.exp DivF32Under.vgtest \
              DivF64.stderr.exp DivF64.vgtest \
              DivF64Infinity.stderr.exp DivF64Infinity.vgtest \
              DivF64Nan.stderr.exp DivF64Nan.vgtest \
              DivF64Under.stderr.exp DivF64Under.vgtest \
              F64toF32.stderr.exp F64toF32.vgtest \
              F64toF32Overflow.stderr.exp F64toF32Overflow.vgtest \
              F64toF32OverflowNeg.stderr.exp F64toF32OverflowNeg.vgtest \
              F64toF32Under.stderr.exp F64toF32Under.vgtest \
			        F64toI32S.stderr.exp F64toI32S.vgtest \
              F64toI32SInf.stderr.exp F64toI32SInf.vgtest \
              F64toI32SNaN.stderr.exp F64toI32SNaN.vgtest \
              F64toI32SOverflow.stderr.exp F64toI32SOverflow.vgtest \
              F64toI32SOverflowNeg.stderr.exp F64toI32SOverflowNeg.vgtest \
              F64toI64S.stderr.exp F64toI64S.vgtest \
              F64toI64SInf.stderr.exp F64toI64SInf.vgtest \
              F64toI64SNaN.stderr.exp F64toI64SNaN.vgtest \
              F64toI64SOverflow.stderr.exp F64toI64SOverflow.vgtest \
              F64toI64SOverflowNeg.stderr.exp F64toI64SOverflowNeg.vgtest \
              Mul32.stderr.exp Mul32.vgtest \
              Mul32Overflow.stderr.exp Mul32Overflow.vgtest \
              Mul64.stderr.exp Mul64.vgtest \
              Mul64Overflow.stderr.exp Mul64Overflow.vgtest \
              MulF32.stderr.exp MulF32.vgtest \
              MulF32Infinity.stderr.exp MulF32Intinity.vgtest \
              MulF32Under.stderr.exp MulF32Under.vgtest \
              MulF64.stderr.exp MulF64.vgtest \
              MulF64Infinity.stderr.exp MulF64Intinity.vgtest \
              MulF64Under.stderr.exp MulF64Under.vgtest \
              SqrtF64.stderr.exp SqrtF64.vgtest \
              SqrtF64Nan.stderr.exp SqrtF64Nan.vgtest \
              SqrtLibcF64.stderr.exp SqrtLibcF64.vgtest \
              SqrtLibcF64Nan.stderr.exp SqrtLibcF64Nan.vgtest \
              Sub32.stderr.exp Sub32.vgtest \
              Sub32Overflow.stderr.exp Sub32Overflow.vgtest \
              Sub32OverflowNeg.stderr.exp Sub32OverflowNeg.vgtest \
              Sub64.stderr.exp Sub64.vgtest \
              Sub64Overflow.stderr.exp Sub64Overflow.vgtest \
              Sub64OverflowNeg.stderr.exp Sub64OverflowNeg.vgtest \
              SubF32.stderr.exp SubF32.vgtest \
              SubF32Cancel.stderr.exp SubF32Cancel.vgtest \
              SubF32Infinity.stderr.exp SubF32Infinity.vgtest \
              SubF32Nan.stderr.exp SubF32Nan.vgtest \
              SubF32Pre.stderr.exp SubF32Pre.vgtest \
              SubF64.stderr.exp SubF64.vgtest \
              SubF64Cancel.stderr.exp SubF64Cancel.vgtest \
              SubF64Infinity.stderr.exp SubF64Infinity.vgtest \
              SubF64Nan.stderr.exp SubF64Nan.vgtest \
              SubF64Pre.stderr.exp SubF64Pre.vgtest

AM_LDFLAGS = -lm
all: all-recursive

.SUFFIXES:
.SUFFIXES: .c .o .obj
$(srcdir)/Makefile.in: @MAINTAINER_MODE_TRUE@ $(srcdir)/Makefile.am $(top_srcdir)/Makefile.tool-tests.am $(top_srcdir)/Makefile.all.am $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      ( cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh ) \
	        && { if test -f $@; then exit 0; else break; fi; }; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --foreign cojac/tests/Makefile'; \
	$(am__cd) $(top_srcdir) && \
	  $(AUTOMAKE) --foreign cojac/tests/Makefile
.PRECIOUS: Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
	esac;
$(top_srcdir)/Makefile.tool-tests.am $(top_srcdir)/Makefile.all.am:

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure: @MAINTAINER_MODE_TRUE@ $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4): @MAINTAINER_MODE_TRUE@ $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(am__aclocal_m4_deps):

clean-checkPROGRAMS:
	-test -z "$(check_PROGRAMS)" || rm -f $(check_PROGRAMS)
Add32$(EXEEXT): $(Add32_OBJECTS) $(Add32_DEPENDENCIES) $(EXTRA_Add32_DEPENDENCIES) 
	@rm -f Add32$(EXEEXT)
	$(LINK) $(Add32_OBJECTS) $(Add32_LDADD) $(LIBS)
Add32Overflow$(EXEEXT): $(Add32Overflow_OBJECTS) $(Add32Overflow_DEPENDENCIES) $(EXTRA_Add32Overflow_DEPENDENCIES) 
	@rm -f Add32Overflow$(EXEEXT)
	$(LINK) $(Add32Overflow_OBJECTS) $(Add32Overflow_LDADD) $(LIBS)
Add32OverflowNeg$(EXEEXT): $(Add32OverflowNeg_OBJECTS) $(Add32OverflowNeg_DEPENDENCIES) $(EXTRA_Add32OverflowNeg_DEPENDENCIES) 
	@rm -f Add32OverflowNeg$(EXEEXT)
	$(LINK) $(Add32OverflowNeg_OBJECTS) $(Add32OverflowNeg_LDADD) $(LIBS)
Add64$(EXEEXT): $(Add64_OBJECTS) $(Add64_DEPENDENCIES) $(EXTRA_Add64_DEPENDENCIES) 
	@rm -f Add64$(EXEEXT)
	$(LINK) $(Add64_OBJECTS) $(Add64_LDADD) $(LIBS)
Add64Overflow$(EXEEXT): $(Add64Overflow_OBJECTS) $(Add64Overflow_DEPENDENCIES) $(EXTRA_Add64Overflow_DEPENDENCIES) 
	@rm -f Add64Overflow$(EXEEXT)
	$(LINK) $(Add64Overflow_OBJECTS) $(Add64Overflow_LDADD) $(LIBS)
Add64OverflowNeg$(EXEEXT): $(Add64OverflowNeg_OBJECTS) $(Add64OverflowNeg_DEPENDENCIES) $(EXTRA_Add64OverflowNeg_DEPENDENCIES) 
	@rm -f Add64OverflowNeg$(EXEEXT)
	$(LINK) $(Add64OverflowNeg_OBJECTS) $(Add64OverflowNeg_LDADD) $(LIBS)
AddF32$(EXEEXT): $(AddF32_OBJECTS) $(AddF32_DEPENDENCIES) $(EXTRA_AddF32_DEPENDENCIES) 
	@rm -f AddF32$(EXEEXT)
	$(LINK) $(AddF32_OBJECTS) $(AddF32_LDADD) $(LIBS)
AddF32Cancel$(EXEEXT): $(AddF32Cancel_OBJECTS) $(AddF32Cancel_DEPENDENCIES) $(EXTRA_AddF32Cancel_DEPENDENCIES) 
	@rm -f AddF32Cancel$(EXEEXT)
	$(LINK) $(AddF32Cancel_OBJECTS) $(AddF32Cancel_LDADD) $(LIBS)
AddF32Infinity$(EXEEXT): $(AddF32Infinity_OBJECTS) $(AddF32Infinity_DEPENDENCIES) $(EXTRA_AddF32Infinity_DEPENDENCIES) 
	@rm -f AddF32Infinity$(EXEEXT)
	$(LINK) $(AddF32Infinity_OBJECTS) $(AddF32Infinity_LDADD) $(LIBS)
AddF32Nan$(EXEEXT): $(AddF32Nan_OBJECTS) $(AddF32Nan_DEPENDENCIES) $(EXTRA_AddF32Nan_DEPENDENCIES) 
	@rm -f AddF32Nan$(EXEEXT)
	$(LINK) $(AddF32Nan_OBJECTS) $(AddF32Nan_LDADD) $(LIBS)
AddF32Pre$(EXEEXT): $(AddF32Pre_OBJECTS) $(AddF32Pre_DEPENDENCIES) $(EXTRA_AddF32Pre_DEPENDENCIES) 
	@rm -f AddF32Pre$(EXEEXT)
	$(LINK) $(AddF32Pre_OBJECTS) $(AddF32Pre_LDADD) $(LIBS)
AddF64$(EXEEXT): $(AddF64_OBJECTS) $(AddF64_DEPENDENCIES) $(EXTRA_AddF64_DEPENDENCIES) 
	@rm -f AddF64$(EXEEXT)
	$(LINK) $(AddF64_OBJECTS) $(AddF64_LDADD) $(LIBS)
AddF64Cancel$(EXEEXT): $(AddF64Cancel_OBJECTS) $(AddF64Cancel_DEPENDENCIES) $(EXTRA_AddF64Cancel_DEPENDENCIES) 
	@rm -f AddF64Cancel$(EXEEXT)
	$(LINK) $(AddF64Cancel_OBJECTS) $(AddF64Cancel_LDADD) $(LIBS)
AddF64Infinity$(EXEEXT): $(AddF64Infinity_OBJECTS) $(AddF64Infinity_DEPENDENCIES) $(EXTRA_AddF64Infinity_DEPENDENCIES) 
	@rm -f AddF64Infinity$(EXEEXT)
	$(LINK) $(AddF64Infinity_OBJECTS) $(AddF64Infinity_LDADD) $(LIBS)
AddF64Nan$(EXEEXT): $(AddF64Nan_OBJECTS) $(AddF64Nan_DEPENDENCIES) $(EXTRA_AddF64Nan_DEPENDENCIES) 
	@rm -f AddF64Nan$(EXEEXT)
	$(LINK) $(AddF64Nan_OBJECTS) $(AddF64Nan_LDADD) $(LIBS)
AddF64Pre$(EXEEXT): $(AddF64Pre_OBJECTS) $(AddF64Pre_DEPENDENCIES) $(EXTRA_AddF64Pre_DEPENDENCIES) 
	@rm -f AddF64Pre$(EXEEXT)
	$(LINK) $(AddF64Pre_OBJECTS) $(AddF64Pre_LDADD) $(LIBS)
CmpF64$(EXEEXT): $(CmpF64_OBJECTS) $(CmpF64_DEPENDENCIES) $(EXTRA_CmpF64_DEPENDENCIES) 
	@rm -f CmpF64$(EXEEXT)
	$(LINK) $(CmpF64_OBJECTS) $(CmpF64_LDADD) $(LIBS)
CmpF64Close$(EXEEXT): $(CmpF64Close_OBJECTS) $(CmpF64Close_DEPENDENCIES) $(EXTRA_CmpF64Close_DEPENDENCIES) 
	@rm -f CmpF64Close$(EXEEXT)
	$(LINK) $(CmpF64Close_OBJECTS) $(CmpF64Close_LDADD) $(LIBS)
Div32$(EXEEXT): $(Div32_OBJECTS) $(Div32_DEPENDENCIES) $(EXTRA_Div32_DEPENDENCIES) 
	@rm -f Div32$(EXEEXT)
	$(LINK) $(Div32_OBJECTS) $(Div32_LDADD) $(LIBS)
Div64$(EXEEXT): $(Div64_OBJECTS) $(Div64_DEPENDENCIES) $(EXTRA_Div64_DEPENDENCIES) 
	@rm -f Div64$(EXEEXT)
	$(LINK) $(Div64_OBJECTS) $(Div64_LDADD) $(LIBS)
DivF32$(EXEEXT): $(DivF32_OBJECTS) $(DivF32_DEPENDENCIES) $(EXTRA_DivF32_DEPENDENCIES) 
	@rm -f DivF32$(EXEEXT)
	$(LINK) $(DivF32_OBJECTS) $(DivF32_LDADD) $(LIBS)
DivF32Infinity$(EXEEXT): $(DivF32Infinity_OBJECTS) $(DivF32Infinity_DEPENDENCIES) $(EXTRA_DivF32Infinity_DEPENDENCIES) 
	@rm -f DivF32Infinity$(EXEEXT)
	$(LINK) $(DivF32Infinity_OBJECTS) $(DivF32Infinity_LDADD) $(LIBS)
DivF32Nan$(EXEEXT): $(DivF32Nan_OBJECTS) $(DivF32Nan_DEPENDENCIES) $(EXTRA_DivF32Nan_DEPENDENCIES) 
	@rm -f DivF32Nan$(EXEEXT)
	$(LINK) $(DivF32Nan_OBJECTS) $(DivF32Nan_LDADD) $(LIBS)
DivF32Under$(EXEEXT): $(DivF32Under_OBJECTS) $(DivF32Under_DEPENDENCIES) $(EXTRA_DivF32Under_DEPENDENCIES) 
	@rm -f DivF32Under$(EXEEXT)
	$(LINK) $(DivF32Under_OBJECTS) $(DivF32Under_LDADD) $(LIBS)
DivF64$(EXEEXT): $(DivF64_OBJECTS) $(DivF64_DEPENDENCIES) $(EXTRA_DivF64_DEPENDENCIES) 
	@rm -f DivF64$(EXEEXT)
	$(LINK) $(DivF64_OBJECTS) $(DivF64_LDADD) $(LIBS)
DivF64Infinity$(EXEEXT): $(DivF64Infinity_OBJECTS) $(DivF64Infinity_DEPENDENCIES) $(EXTRA_DivF64Infinity_DEPENDENCIES) 
	@rm -f DivF64Infinity$(EXEEXT)
	$(LINK) $(DivF64Infinity_OBJECTS) $(DivF64Infinity_LDADD) $(LIBS)
DivF64Nan$(EXEEXT): $(DivF64Nan_OBJECTS) $(DivF64Nan_DEPENDENCIES) $(EXTRA_DivF64Nan_DEPENDENCIES) 
	@rm -f DivF64Nan$(EXEEXT)
	$(LINK) $(DivF64Nan_OBJECTS) $(DivF64Nan_LDADD) $(LIBS)
DivF64Under$(EXEEXT): $(DivF64Under_OBJECTS) $(DivF64Under_DEPENDENCIES) $(EXTRA_DivF64Under_DEPENDENCIES) 
	@rm -f DivF64Under$(EXEEXT)
	$(LINK) $(DivF64Under_OBJECTS) $(DivF64Under_LDADD) $(LIBS)
F64toF32$(EXEEXT): $(F64toF32_OBJECTS) $(F64toF32_DEPENDENCIES) $(EXTRA_F64toF32_DEPENDENCIES) 
	@rm -f F64toF32$(EXEEXT)
	$(LINK) $(F64toF32_OBJECTS) $(F64toF32_LDADD) $(LIBS)
F64toF32Overflow$(EXEEXT): $(F64toF32Overflow_OBJECTS) $(F64toF32Overflow_DEPENDENCIES) $(EXTRA_F64toF32Overflow_DEPENDENCIES) 
	@rm -f F64toF32Overflow$(EXEEXT)
	$(LINK) $(F64toF32Overflow_OBJECTS) $(F64toF32Overflow_LDADD) $(LIBS)
F64toF32OverflowNeg$(EXEEXT): $(F64toF32OverflowNeg_OBJECTS) $(F64toF32OverflowNeg_DEPENDENCIES) $(EXTRA_F64toF32OverflowNeg_DEPENDENCIES) 
	@rm -f F64toF32OverflowNeg$(EXEEXT)
	$(LINK) $(F64toF32OverflowNeg_OBJECTS) $(F64toF32OverflowNeg_LDADD) $(LIBS)
F64toF32Under$(EXEEXT): $(F64toF32Under_OBJECTS) $(F64toF32Under_DEPENDENCIES) $(EXTRA_F64toF32Under_DEPENDENCIES) 
	@rm -f F64toF32Under$(EXEEXT)
	$(LINK) $(F64toF32Under_OBJECTS) $(F64toF32Under_LDADD) $(LIBS)
F64toI32S$(EXEEXT): $(F64toI32S_OBJECTS) $(F64toI32S_DEPENDENCIES) $(EXTRA_F64toI32S_DEPENDENCIES) 
	@rm -f F64toI32S$(EXEEXT)
	$(LINK) $(F64toI32S_OBJECTS) $(F64toI32S_LDADD) $(LIBS)
F64toI32SInf$(EXEEXT): $(F64toI32SInf_OBJECTS) $(F64toI32SInf_DEPENDENCIES) $(EXTRA_F64toI32SInf_DEPENDENCIES) 
	@rm -f F64toI32SInf$(EXEEXT)
	$(LINK) $(F64toI32SInf_OBJECTS) $(F64toI32SInf_LDADD) $(LIBS)
F64toI32SNaN$(EXEEXT): $(F64toI32SNaN_OBJECTS) $(F64toI32SNaN_DEPENDENCIES) $(EXTRA_F64toI32SNaN_DEPENDENCIES) 
	@rm -f F64toI32SNaN$(EXEEXT)
	$(LINK) $(F64toI32SNaN_OBJECTS) $(F64toI32SNaN_LDADD) $(LIBS)
F64toI32SOverflow$(EXEEXT): $(F64toI32SOverflow_OBJECTS) $(F64toI32SOverflow_DEPENDENCIES) $(EXTRA_F64toI32SOverflow_DEPENDENCIES) 
	@rm -f F64toI32SOverflow$(EXEEXT)
	$(LINK) $(F64toI32SOverflow_OBJECTS) $(F64toI32SOverflow_LDADD) $(LIBS)
F64toI32SOverflowNeg$(EXEEXT): $(F64toI32SOverflowNeg_OBJECTS) $(F64toI32SOverflowNeg_DEPENDENCIES) $(EXTRA_F64toI32SOverflowNeg_DEPENDENCIES) 
	@rm -f F64toI32SOverflowNeg$(EXEEXT)
	$(LINK) $(F64toI32SOverflowNeg_OBJECTS) $(F64toI32SOverflowNeg_LDADD) $(LIBS)
F64toI64S$(EXEEXT): $(F64toI64S_OBJECTS) $(F64toI64S_DEPENDENCIES) $(EXTRA_F64toI64S_DEPENDENCIES) 
	@rm -f F64toI64S$(EXEEXT)
	$(LINK) $(F64toI64S_OBJECTS) $(F64toI64S_LDADD) $(LIBS)
F64toI64SInf$(EXEEXT): $(F64toI64SInf_OBJECTS) $(F64toI64SInf_DEPENDENCIES) $(EXTRA_F64toI64SInf_DEPENDENCIES) 
	@rm -f F64toI64SInf$(EXEEXT)
	$(LINK) $(F64toI64SInf_OBJECTS) $(F64toI64SInf_LDADD) $(LIBS)
F64toI64SNaN$(EXEEXT): $(F64toI64SNaN_OBJECTS) $(F64toI64SNaN_DEPENDENCIES) $(EXTRA_F64toI64SNaN_DEPENDENCIES) 
	@rm -f F64toI64SNaN$(EXEEXT)
	$(LINK) $(F64toI64SNaN_OBJECTS) $(F64toI64SNaN_LDADD) $(LIBS)
F64toI64SOverflow$(EXEEXT): $(F64toI64SOverflow_OBJECTS) $(F64toI64SOverflow_DEPENDENCIES) $(EXTRA_F64toI64SOverflow_DEPENDENCIES) 
	@rm -f F64toI64SOverflow$(EXEEXT)
	$(LINK) $(F64toI64SOverflow_OBJECTS) $(F64toI64SOverflow_LDADD) $(LIBS)
F64toI64SOverflowNeg$(EXEEXT): $(F64toI64SOverflowNeg_OBJECTS) $(F64toI64SOverflowNeg_DEPENDENCIES) $(EXTRA_F64toI64SOverflowNeg_DEPENDENCIES) 
	@rm -f F64toI64SOverflowNeg$(EXEEXT)
	$(LINK) $(F64toI64SOverflowNeg_OBJECTS) $(F64toI64SOverflowNeg_LDADD) $(LIBS)
Mul32$(EXEEXT): $(Mul32_OBJECTS) $(Mul32_DEPENDENCIES) $(EXTRA_Mul32_DEPENDENCIES) 
	@rm -f Mul32$(EXEEXT)
	$(LINK) $(Mul32_OBJECTS) $(Mul32_LDADD) $(LIBS)
Mul32Overflow$(EXEEXT): $(Mul32Overflow_OBJECTS) $(Mul32Overflow_DEPENDENCIES) $(EXTRA_Mul32Overflow_DEPENDENCIES) 
	@rm -f Mul32Overflow$(EXEEXT)
	$(LINK) $(Mul32Overflow_OBJECTS) $(Mul32Overflow_LDADD) $(LIBS)
Mul64$(EXEEXT): $(Mul64_OBJECTS) $(Mul64_DEPENDENCIES) $(EXTRA_Mul64_DEPENDENCIES) 
	@rm -f Mul64$(EXEEXT)
	$(LINK) $(Mul64_OBJECTS) $(Mul64_LDADD) $(LIBS)
Mul64Overflow$(EXEEXT): $(Mul64Overflow_OBJECTS) $(Mul64Overflow_DEPENDENCIES) $(EXTRA_Mul64Overflow_DEPENDENCIES) 
	@rm -f Mul64Overflow$(EXEEXT)
	$(LINK) $(Mul64Overflow_OBJECTS) $(Mul64Overflow_LDADD) $(LIBS)
MulF32$(EXEEXT): $(MulF32_OBJECTS) $(MulF32_DEPENDENCIES) $(EXTRA_MulF32_DEPENDENCIES) 
	@rm -f MulF32$(EXEEXT)
	$(LINK) $(MulF32_OBJECTS) $(MulF32_LDADD) $(LIBS)
MulF32Infinity$(EXEEXT): $(MulF32Infinity_OBJECTS) $(MulF32Infinity_DEPENDENCIES) $(EXTRA_MulF32Infinity_DEPENDENCIES) 
	@rm -f MulF32Infinity$(EXEEXT)
	$(LINK) $(MulF32Infinity_OBJECTS) $(MulF32Infinity_LDADD) $(LIBS)
MulF32Under$(EXEEXT): $(MulF32Under_OBJECTS) $(MulF32Under_DEPENDENCIES) $(EXTRA_MulF32Under_DEPENDENCIES) 
	@rm -f MulF32Under$(EXEEXT)
	$(LINK) $(MulF32Under_OBJECTS) $(MulF32Under_LDADD) $(LIBS)
MulF64$(EXEEXT): $(MulF64_OBJECTS) $(MulF64_DEPENDENCIES) $(EXTRA_MulF64_DEPENDENCIES) 
	@rm -f MulF64$(EXEEXT)
	$(LINK) $(MulF64_OBJECTS) $(MulF64_LDADD) $(LIBS)
MulF64Infinity$(EXEEXT): $(MulF64Infinity_OBJECTS) $(MulF64Infinity_DEPENDENCIES) $(EXTRA_MulF64Infinity_DEPENDENCIES) 
	@rm -f MulF64Infinity$(EXEEXT)
	$(LINK) $(MulF64Infinity_OBJECTS) $(MulF64Infinity_LDADD) $(LIBS)
MulF64Under$(EXEEXT): $(MulF64Under_OBJECTS) $(MulF64Under_DEPENDENCIES) $(EXTRA_MulF64Under_DEPENDENCIES) 
	@rm -f MulF64Under$(EXEEXT)
	$(LINK) $(MulF64Under_OBJECTS) $(MulF64Under_LDADD) $(LIBS)
SqrtF64$(EXEEXT): $(SqrtF64_OBJECTS) $(SqrtF64_DEPENDENCIES) $(EXTRA_SqrtF64_DEPENDENCIES) 
	@rm -f SqrtF64$(EXEEXT)
	$(LINK) $(SqrtF64_OBJECTS) $(SqrtF64_LDADD) $(LIBS)
SqrtF64Nan$(EXEEXT): $(SqrtF64Nan_OBJECTS) $(SqrtF64Nan_DEPENDENCIES) $(EXTRA_SqrtF64Nan_DEPENDENCIES) 
	@rm -f SqrtF64Nan$(EXEEXT)
	$(LINK) $(SqrtF64Nan_OBJECTS) $(SqrtF64Nan_LDADD) $(LIBS)
SqrtLibcF64$(EXEEXT): $(SqrtLibcF64_OBJECTS) $(SqrtLibcF64_DEPENDENCIES) $(EXTRA_SqrtLibcF64_DEPENDENCIES) 
	@rm -f SqrtLibcF64$(EXEEXT)
	$(LINK) $(SqrtLibcF64_OBJECTS) $(SqrtLibcF64_LDADD) $(LIBS)
SqrtLibcF64Nan$(EXEEXT): $(SqrtLibcF64Nan_OBJECTS) $(SqrtLibcF64Nan_DEPENDENCIES) $(EXTRA_SqrtLibcF64Nan_DEPENDENCIES) 
	@rm -f SqrtLibcF64Nan$(EXEEXT)
	$(LINK) $(SqrtLibcF64Nan_OBJECTS) $(SqrtLibcF64Nan_LDADD) $(LIBS)
Sub32$(EXEEXT): $(Sub32_OBJECTS) $(Sub32_DEPENDENCIES) $(EXTRA_Sub32_DEPENDENCIES) 
	@rm -f Sub32$(EXEEXT)
	$(LINK) $(Sub32_OBJECTS) $(Sub32_LDADD) $(LIBS)
Sub32Overflow$(EXEEXT): $(Sub32Overflow_OBJECTS) $(Sub32Overflow_DEPENDENCIES) $(EXTRA_Sub32Overflow_DEPENDENCIES) 
	@rm -f Sub32Overflow$(EXEEXT)
	$(LINK) $(Sub32Overflow_OBJECTS) $(Sub32Overflow_LDADD) $(LIBS)
Sub32OverflowNeg$(EXEEXT): $(Sub32OverflowNeg_OBJECTS) $(Sub32OverflowNeg_DEPENDENCIES) $(EXTRA_Sub32OverflowNeg_DEPENDENCIES) 
	@rm -f Sub32OverflowNeg$(EXEEXT)
	$(LINK) $(Sub32OverflowNeg_OBJECTS) $(Sub32OverflowNeg_LDADD) $(LIBS)
Sub64$(EXEEXT): $(Sub64_OBJECTS) $(Sub64_DEPENDENCIES) $(EXTRA_Sub64_DEPENDENCIES) 
	@rm -f Sub64$(EXEEXT)
	$(LINK) $(Sub64_OBJECTS) $(Sub64_LDADD) $(LIBS)
Sub64Overflow$(EXEEXT): $(Sub64Overflow_OBJECTS) $(Sub64Overflow_DEPENDENCIES) $(EXTRA_Sub64Overflow_DEPENDENCIES) 
	@rm -f Sub64Overflow$(EXEEXT)
	$(LINK) $(Sub64Overflow_OBJECTS) $(Sub64Overflow_LDADD) $(LIBS)
Sub64OverflowNeg$(EXEEXT): $(Sub64OverflowNeg_OBJECTS) $(Sub64OverflowNeg_DEPENDENCIES) $(EXTRA_Sub64OverflowNeg_DEPENDENCIES) 
	@rm -f Sub64OverflowNeg$(EXEEXT)
	$(LINK) $(Sub64OverflowNeg_OBJECTS) $(Sub64OverflowNeg_LDADD) $(LIBS)
SubF32$(EXEEXT): $(SubF32_OBJECTS) $(SubF32_DEPENDENCIES) $(EXTRA_SubF32_DEPENDENCIES) 
	@rm -f SubF32$(EXEEXT)
	$(LINK) $(SubF32_OBJECTS) $(SubF32_LDADD) $(LIBS)
SubF32Cancel$(EXEEXT): $(SubF32Cancel_OBJECTS) $(SubF32Cancel_DEPENDENCIES) $(EXTRA_SubF32Cancel_DEPENDENCIES) 
	@rm -f SubF32Cancel$(EXEEXT)
	$(LINK) $(SubF32Cancel_OBJECTS) $(SubF32Cancel_LDADD) $(LIBS)
SubF32Infinity$(EXEEXT): $(SubF32Infinity_OBJECTS) $(SubF32Infinity_DEPENDENCIES) $(EXTRA_SubF32Infinity_DEPENDENCIES) 
	@rm -f SubF32Infinity$(EXEEXT)
	$(LINK) $(SubF32Infinity_OBJECTS) $(SubF32Infinity_LDADD) $(LIBS)
SubF32Nan$(EXEEXT): $(SubF32Nan_OBJECTS) $(SubF32Nan_DEPENDENCIES) $(EXTRA_SubF32Nan_DEPENDENCIES) 
	@rm -f SubF32Nan$(EXEEXT)
	$(LINK) $(SubF32Nan_OBJECTS) $(SubF32Nan_LDADD) $(LIBS)
SubF32Pre$(EXEEXT): $(SubF32Pre_OBJECTS) $(SubF32Pre_DEPENDENCIES) $(EXTRA_SubF32Pre_DEPENDENCIES) 
	@rm -f SubF32Pre$(EXEEXT)
	$(LINK) $(SubF32Pre_OBJECTS) $(SubF32Pre_LDADD) $(LIBS)
SubF64$(EXEEXT): $(SubF64_OBJECTS) $(SubF64_DEPENDENCIES) $(EXTRA_SubF64_DEPENDENCIES) 
	@rm -f SubF64$(EXEEXT)
	$(LINK) $(SubF64_OBJECTS) $(SubF64_LDADD) $(LIBS)
SubF64Cancel$(EXEEXT): $(SubF64Cancel_OBJECTS) $(SubF64Cancel_DEPENDENCIES) $(EXTRA_SubF64Cancel_DEPENDENCIES) 
	@rm -f SubF64Cancel$(EXEEXT)
	$(LINK) $(SubF64Cancel_OBJECTS) $(SubF64Cancel_LDADD) $(LIBS)
SubF64Infinity$(EXEEXT): $(SubF64Infinity_OBJECTS) $(SubF64Infinity_DEPENDENCIES) $(EXTRA_SubF64Infinity_DEPENDENCIES) 
	@rm -f SubF64Infinity$(EXEEXT)
	$(LINK) $(SubF64Infinity_OBJECTS) $(SubF64Infinity_LDADD) $(LIBS)
SubF64Nan$(EXEEXT): $(SubF64Nan_OBJECTS) $(SubF64Nan_DEPENDENCIES) $(EXTRA_SubF64Nan_DEPENDENCIES) 
	@rm -f SubF64Nan$(EXEEXT)
	$(LINK) $(SubF64Nan_OBJECTS) $(SubF64Nan_LDADD) $(LIBS)
SubF64Pre$(EXEEXT): $(SubF64Pre_OBJECTS) $(SubF64Pre_DEPENDENCIES) $(EXTRA_SubF64Pre_DEPENDENCIES) 
	@rm -f SubF64Pre$(EXEEXT)
	$(LINK) $(SubF64Pre_OBJECTS) $(SubF64Pre_LDADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT)

distclean-compile:
	-rm -f *.tab.c

@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/Add32.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/Add32Overflow.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/Add32OverflowNeg.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/Add64.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/Add64Overflow.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/Add64OverflowNeg.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/AddF32.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/AddF32Cancel.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/AddF32Infinity.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/AddF32Nan.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/AddF32Pre.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/AddF64.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/AddF64Cancel.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/AddF64Infinity.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/AddF64Nan.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/AddF64Pre.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/CmpF64.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/CmpF64Close.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/Div32.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/Div64.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/DivF32.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/DivF32Infinity.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/DivF32Nan.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/DivF32Under.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/DivF64.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/DivF64Infinity.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/DivF64Nan.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/DivF64Under.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/F64toF32.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/F64toF32Overflow.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/F64toF32OverflowNeg.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/F64toF32Under.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/F64toI32S.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/F64toI32SInf.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/F64toI32SNaN.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/F64toI32SOverflow.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/F64toI32SOverflowNeg.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/F64toI64S.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/F64toI64SInf.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/F64toI64SNaN.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/F64toI64SOverflow.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/F64toI64SOverflowNeg.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/Mul32.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/Mul32Overflow.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/Mul64.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/Mul64Overflow.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/MulF32.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/MulF32Infinity.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/MulF32Under.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/MulF64.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/MulF64Infinity.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/MulF64Under.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/SqrtF64.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/SqrtF64Nan.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/SqrtLibcF64.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/SqrtLibcF64Nan.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/Sub32.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/Sub32Overflow.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/Sub32OverflowNeg.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/Sub64.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/Sub64Overflow.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/Sub64OverflowNeg.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/SubF32.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/SubF32Cancel.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/SubF32Infinity.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/SubF32Nan.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/SubF32Pre.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/SubF64.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/SubF64Cancel.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/SubF64Infinity.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/SubF64Nan.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/SubF64Pre.Po@am__quote@

.c.o:
@am__fastdepCC_TRUE@	depbase=`echo $@ | sed 's|[^/]*$$|$(DEPDIR)/&|;s|\.o$$||'`;\
@am__fastdepCC_TRUE@	$(COMPILE) -MT $@ -MD -MP -MF $$depbase.Tpo -c -o $@ $< &&\
@am__fastdepCC_TRUE@	$(am__mv) $$depbase.Tpo $$depbase.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='$<' object='$@' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(COMPILE) -c -o $@ $<

.c.obj:
@am__fastdepCC_TRUE@	depbase=`echo $@ | sed 's|[^/]*$$|$(DEPDIR)/&|;s|\.obj$$||'`;\
@am__fastdepCC_TRUE@	$(COMPILE) -MT $@ -MD -MP -MF $$depbase.Tpo -c -o $@ `$(CYGPATH_W) '$<'` &&\
@am__fastdepCC_TRUE@	$(am__mv) $$depbase.Tpo $$depbase.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='$<' object='$@' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(COMPILE) -c -o $@ `$(CYGPATH_W) '$<'`

# This directory's subdirectories are mostly independent; you can cd
# into them and run `make' without going through this Makefile.
# To change the values of `make' variables: instead of editing Makefiles,
# (1) if the variable is set in `config.status', edit `config.status'
#     (which will cause the Makefiles to be regenerated when you run `make');
# (2) otherwise, pass the desired values on the `make' command line.
$(RECURSIVE_TARGETS):
	@fail= failcom='exit 1'; \
	for f in x $$MAKEFLAGS; do \
	  case $$f in \
	    *=* | --[!k]*);; \
	    *k*) failcom='fail=yes';; \
	  esac; \
	done; \
	dot_seen=no; \
	target=`echo $@ | sed s/-recursive//`; \
	list='$(SUBDIRS)'; for subdir in $$list; do \
	  echo "Making $$target in $$subdir"; \
	  if test "$$subdir" = "."; then \
	    dot_seen=yes; \
	    local_target="$$target-am"; \
	  else \
	    local_target="$$target"; \
	  fi; \
	  ($(am__cd) $$subdir && $(MAKE) $(AM_MAKEFLAGS) $$local_target) \
	  || eval $$failcom; \
	done; \
	if test "$$dot_seen" = "no"; then \
	  $(MAKE) $(AM_MAKEFLAGS) "$$target-am" || exit 1; \
	fi; test -z "$$fail"

$(RECURSIVE_CLEAN_TARGETS):
	@fail= failcom='exit 1'; \
	for f in x $$MAKEFLAGS; do \
	  case $$f in \
	    *=* | --[!k]*);; \
	    *k*) failcom='fail=yes';; \
	  esac; \
	done; \
	dot_seen=no; \
	case "$@" in \
	  distclean-* | maintainer-clean-*) list='$(DIST_SUBDIRS)' ;; \
	  *) list='$(SUBDIRS)' ;; \
	esac; \
	rev=''; for subdir in $$list; do \
	  if test "$$subdir" = "."; then :; else \
	    rev="$$subdir $$rev"; \
	  fi; \
	done; \
	rev="$$rev ."; \
	target=`echo $@ | sed s/-recursive//`; \
	for subdir in $$rev; do \
	  echo "Making $$target in $$subdir"; \
	  if test "$$subdir" = "."; then \
	    local_target="$$target-am"; \
	  else \
	    local_target="$$target"; \
	  fi; \
	  ($(am__cd) $$subdir && $(MAKE) $(AM_MAKEFLAGS) $$local_target) \
	  || eval $$failcom; \
	done && test -z "$$fail"
tags-recursive:
	list='$(SUBDIRS)'; for subdir in $$list; do \
	  test "$$subdir" = . || ($(am__cd) $$subdir && $(MAKE) $(AM_MAKEFLAGS) tags); \
	done
ctags-recursive:
	list='$(SUBDIRS)'; for subdir in $$list; do \
	  test "$$subdir" = . || ($(am__cd) $$subdir && $(MAKE) $(AM_MAKEFLAGS) ctags); \
	done

ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	mkid -fID $$unique
tags: TAGS

TAGS: tags-recursive $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	set x; \
	here=`pwd`; \
	if ($(ETAGS) --etags-include --version) >/dev/null 2>&1; then \
	  include_option=--etags-include; \
	  empty_fix=.; \
	else \
	  include_option=--include; \
	  empty_fix=; \
	fi; \
	list='$(SUBDIRS)'; for subdir in $$list; do \
	  if test "$$subdir" = .; then :; else \
	    test ! -f $$subdir/TAGS || \
	      set "$$@" "$$include_option=$$here/$$subdir/TAGS"; \
	  fi; \
	done; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	shift; \
	if test -z "$(ETAGS_ARGS)$$*$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  if test $$# -gt 0; then \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      "$$@" $$unique; \
	  else \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      $$unique; \
	  fi; \
	fi
ctags: CTAGS
CTAGS: ctags-recursive $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	test -z "$(CTAGS_ARGS)$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && $(am__cd) $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) "$$here"

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

distdir: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	list='$(DISTFILES)'; \
	  dist_files=`for file in $$list; do echo $$file; done | \
	  sed -e "s|^$$srcdirstrip/||;t" \
	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
	    if test -d "$(distdir)/$$file"; then \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -fpR $(srcdir)/$$file "$(distdir)$$dir" || exit 1; \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    cp -fpR $$d/$$file "$(distdir)$$dir" || exit 1; \
	  else \
	    test -f "$(distdir)/$$file" \
	    || cp -p $$d/$$file "$(distdir)/$$file" \
	    || exit 1; \
	  fi; \
	done
	@list='$(DIST_SUBDIRS)'; for subdir in $$list; do \
	  if test "$$subdir" = .; then :; else \
	    $(am__make_dryrun) \
	      || test -d "$(distdir)/$$subdir" \
	      || $(MKDIR_P) "$(distdir)/$$subdir" \
	      || exit 1; \
	    dir1=$$subdir; dir2="$(distdir)/$$subdir"; \
	    $(am__relativize); \
	    new_distdir=$$reldir; \
	    dir1=$$subdir; dir2="$(top_distdir)"; \
	    $(am__relativize); \
	    new_top_distdir=$$reldir; \
	    echo " (cd $$subdir && $(MAKE) $(AM_MAKEFLAGS) top_distdir="$$new_top_distdir" distdir="$$new_distdir" \\"; \
	    echo "     am__remove_distdir=: am__skip_length_check=: am__skip_mode_fix=: distdir)"; \
	    ($(am__cd) $$subdir && \
	      $(MAKE) $(AM_MAKEFLAGS) \
	        top_distdir="$$new_top_distdir" \
	        distdir="$$new_distdir" \
		am__remove_distdir=: \
		am__skip_length_check=: \
		am__skip_mode_fix=: \
	        distdir) \
	      || exit 1; \
	  fi; \
	done
check-am: all-am
	$(MAKE) $(AM_MAKEFLAGS) $(check_PROGRAMS)
	$(MAKE) $(AM_MAKEFLAGS) check-local
check: check-recursive
all-am: Makefile $(SCRIPTS)
installdirs: installdirs-recursive
installdirs-am:
install: install-recursive
install-exec: install-exec-recursive
install-data: install-data-recursive
uninstall: uninstall-recursive

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-recursive
install-strip:
	if test -z '$(STRIP)'; then \
	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	      install; \
	else \
	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	    "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'" install; \
	fi
mostlyclean-generic:

clean-generic:

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)
	-test . = "$(srcdir)" || test -z "$(CONFIG_CLEAN_VPATH_FILES)" || rm -f $(CONFIG_CLEAN_VPATH_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-recursive

clean-am: clean-checkPROGRAMS clean-generic clean-local mostlyclean-am

distclean: distclean-recursive
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-tags

dvi: dvi-recursive

dvi-am:

html: html-recursive

html-am:

info: info-recursive

info-am:

install-data-am:

install-dvi: install-dvi-recursive

install-dvi-am:

install-exec-am:

install-html: install-html-recursive

install-html-am:

install-info: install-info-recursive

install-info-am:

install-man:

install-pdf: install-pdf-recursive

install-pdf-am:

install-ps: install-ps-recursive

install-ps-am:

installcheck-am:

maintainer-clean: maintainer-clean-recursive
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-recursive

mostlyclean-am: mostlyclean-compile mostlyclean-generic

pdf: pdf-recursive

pdf-am:

ps: ps-recursive

ps-am:

uninstall-am:

.MAKE: $(RECURSIVE_CLEAN_TARGETS) $(RECURSIVE_TARGETS) check-am \
	ctags-recursive install-am install-strip tags-recursive

.PHONY: $(RECURSIVE_CLEAN_TARGETS) $(RECURSIVE_TARGETS) CTAGS GTAGS \
	all all-am check check-am check-local clean \
	clean-checkPROGRAMS clean-generic clean-local ctags \
	ctags-recursive distclean distclean-compile distclean-generic \
	distclean-tags distdir dvi dvi-am html html-am info info-am \
	install install-am install-data install-data-am install-dvi \
	install-dvi-am install-exec install-exec-am install-html \
	install-html-am install-info install-info-am install-man \
	install-pdf install-pdf-am install-ps install-ps-am \
	install-strip installcheck installcheck-am installdirs \
	installdirs-am maintainer-clean maintainer-clean-generic \
	mostlyclean mostlyclean-compile mostlyclean-generic pdf pdf-am \
	ps ps-am tags tags-recursive uninstall uninstall-am


# This used to be required when Vex had a handwritten Makefile.  It
# shouldn't be needed any more, though.

#----------------------------------------------------------------------------
# noinst_PROGRAMS and noinst_DSYMS targets
#----------------------------------------------------------------------------

# On Darwin, for a program 'p', the DWARF debug info is stored in the
# directory 'p.dSYM'.  This must be generated after the executable is
# created, with 'dsymutil p'.  We could redefine LINK with a script that
# executes 'dsymutil' after linking, but that's a pain.  Instead we use this
# hook so that every time "make check" is run, we subsequently invoke
# 'dsymutil' on all the executables that lack a .dSYM directory, or that are
# newer than their corresponding .dSYM directory.
build-noinst_DSYMS: $(noinst_DSYMS)
	for f in $(noinst_DSYMS); do \
	  if [ ! -e $$f.dSYM  -o  $$f -nt $$f.dSYM ] ; then \
	      echo "dsymutil $$f"; \
	      dsymutil $$f; \
	  fi; \
	done

# This is used by coregrind/Makefile.am and Makefile.tool.am for doing
# "in-place" installs.  It copies $(noinst_PROGRAMS) into $inplacedir.
# It needs to be depended on by an 'all-local' rule.
inplace-noinst_PROGRAMS: $(noinst_PROGRAMS)
	mkdir -p $(inplacedir); \
	for f in $(noinst_PROGRAMS) ; do \
	  rm -f $(inplacedir)/$$f; \
	  ln -f -s ../$(subdir)/$$f $(inplacedir); \
	done

# Similar to inplace-noinst_PROGRAMS
inplace-noinst_DSYMS: build-noinst_DSYMS
	mkdir -p $(inplacedir); \
	for f in $(noinst_DSYMS); do \
	  rm -f $(inplacedir)/$$f.dSYM; \
	  ln -f -s ../$(subdir)/$$f.dSYM $(inplacedir); \
	done

# This is used by coregrind/Makefile.am and by <tool>/Makefile.am for doing
# "make install".  It copies $(noinst_PROGRAMS) into $prefix/lib/valgrind/.
# It needs to be depended on by an 'install-exec-local' rule.
install-noinst_PROGRAMS: $(noinst_PROGRAMS)
	$(mkinstalldirs) $(DESTDIR)$(pkglibdir); \
	for f in $(noinst_PROGRAMS); do \
	  $(INSTALL_PROGRAM) $$f $(DESTDIR)$(pkglibdir); \
	done

# Similar to install-noinst_PROGRAMS.
# Nb: we don't use $(INSTALL_PROGRAM) here because it doesn't work with
# directories.  XXX: not sure whether the resulting permissions will be
# correct when using 'cp -R'...
install-noinst_DSYMS: build-noinst_DSYMS
	$(mkinstalldirs) $(DESTDIR)$(pkglibdir); \
	for f in $(noinst_DSYMS); do \
	  cp -R $$f.dSYM $(DESTDIR)$(pkglibdir); \
	done

# This needs to be depended on by a 'clean-local' rule.
clean-noinst_DSYMS:
	for f in $(noinst_DSYMS); do \
	  rm -rf $$f.dSYM; \
	done

check-local: build-noinst_DSYMS

clean-local: clean-noinst_DSYMS

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
